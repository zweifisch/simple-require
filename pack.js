// Generated by CoffeeScript 1.6.2
(function() {
  var concatScripts, exit, flatten, fs, getDependencies, getDependencyTree, getSimpleRequire, main, minify, parseFileList, path, prettyPrint, program, scanForRequire, uglifyjs,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  path = require('path');

  program = require('commander');

  uglifyjs = require('uglify-js');

  parseFileList = function(filename) {
    var basedir, scripts;

    basedir = path.dirname(filename);
    return scripts = fs.readFileSync(filename, 'utf-8').split("\n").filter(function(x) {
      return x.length > 0 && x[0] !== '#';
    }).map(function(x) {
      return [x, path.join(basedir, "" + x + ".js")];
    });
  };

  getSimpleRequire = function() {
    return fs.readFileSync(path.join(path.dirname(__filename), 'simple-require.js'), 'utf-8');
  };

  concatScripts = function(scriptFiles, entry) {
    var required, scripts;

    required = {};
    scripts = scriptFiles.map(function(_arg) {
      var filename, key, script;

      key = _arg[0], filename = _arg[1];
      if (!(key in required)) {
        script = fs.readFileSync(filename, 'utf-8');
        return "require.preset[\"" + key + "\"] = function(require,exports,module){\n	" + script + "\n};";
      }
    });
    return "(function(){\n	require = {\n		preset:{},\n		entryScript: \"" + entry[0] + "\"\n	};\n	" + (scripts.join("\n")) + "\n	" + (getSimpleRequire()) + "\n})()";
  };

  scanForRequire = function(content) {
    var result;

    result = content.match(/require\s*\(\s*['"]([a-zA-Z0-9.\/_-]+)['"]\s*\)/g);
    if (result != null) {
      return result.map(function(statement) {
        return statement.match(/['"]([a-zA-Z0-9./_-]+)['"]/)[1];
      });
    } else {
      return [];
    }
  };

  getDependencies = function(filename, dict, requiredBy) {
    var r, requires, _i, _len;

    if (dict == null) {
      dict = {};
    }
    if (requiredBy == null) {
      requiredBy = null;
    }
    if (!fs.existsSync(filename)) {
      if (requiredBy != null) {
        exit("" + filename + " not exists, required by " + requiredBy);
      } else {
        exit("" + filename + " not exists");
      }
    }
    requires = scanForRequire(fs.readFileSync(filename, 'utf-8'));
    requires = requires.map(function(r) {
      return path.join(path.dirname(filename), "" + r + ".js");
    });
    dict[filename] = requires;
    for (_i = 0, _len = requires.length; _i < _len; _i++) {
      r = requires[_i];
      if (!(r in dict)) {
        getDependencies(r, dict, filename);
      }
    }
    return dict;
  };

  getDependencyTree = function(dict, keys) {
    var file, ret, _i, _len;

    ret = {};
    if (keys == null) {
      keys = Object.keys(dict);
    }
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      file = keys[_i];
      ret[file] = getDependencyTree(dict, dict[file]);
    }
    return ret;
  };

  flatten = function(dict) {
    var k, ret, _i, _j, _k, _len, _len1, _ref;

    ret = Object.keys(dict);
    for (_i = 0, _len = ret.length; _i < _len; _i++) {
      k = ret[_i];
      _ref = flatten(dict[k]);
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        _k = _ref[_j];
        if (__indexOf.call(ret, _k) < 0) {
          ret.push(_k);
        }
      }
    }
    return ret;
  };

  prettyPrint = function(data, indent) {
    var item, k, v, whitespaces, _i, _j, _len, _results, _results1, _results2;

    if (indent == null) {
      indent = 0;
    }
    whitespaces = (function() {
      _results = [];
      for (var _i = 0; 0 <= indent ? _i <= indent : _i >= indent; 0 <= indent ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(x) {
      return ' ';
    }).join('');
    if (Array.isArray(data)) {
      _results1 = [];
      for (_j = 0, _len = data.length; _j < _len; _j++) {
        item = data[_j];
        _results1.push(prettyPrint(item, indent));
      }
      return _results1;
    } else if (typeof data === 'string') {
      return console.log("" + whitespaces + data);
    } else {
      _results2 = [];
      for (k in data) {
        v = data[k];
        console.log("" + whitespaces + k);
        _results2.push(prettyPrint(v, indent + 3));
      }
      return _results2;
    }
  };

  minify = function(input) {
    var minified;

    minified = uglifyjs.minify(input, {
      fromString: true
    });
    return minified.code;
  };

  exit = function(message, code) {
    if (code == null) {
      code = 1;
    }
    console.log(message);
    return process.exit(code);
  };

  main = function() {
    var configFile, dependencies, output, scriptFiles, shims;

    program.version('0.0.7').option('-c, --concat-scripts <file>', 'concat scripts list in <file>').option('-l, --list-dependency <file>', 'list dependencies of a script').option('--json', 'output as json when listing dependencies').option('--flat', 'output dependencies as a flat list').option('-b, --build <file>', 'concat the script with all it\'s dependencies').option('-m, --minify', 'minify the output using uglifyjs').option('--shims <file>', 'specify a list of shims to be included').option('--get-simple-require', 'write simple-require.js to stdout').parse(process.argv);
    output = '';
    if (program.listDependency) {
      dependencies = getDependencies(program.listDependency);
      output = getDependencyTree(dependencies, [program.listDependency]);
      if (program.flat) {
        output = flatten(output);
      }
      if (program.json) {
        console.log(JSON.stringify(output, null, 3));
      } else {
        prettyPrint(output);
      }
      process.exit(0);
    }
    if (program.concatScripts) {
      configFile = program.concatScripts;
      if (!fs.existsSync(configFile)) {
        exit("" + configFile + " not found");
      }
      scriptFiles = parseFileList(program.concatScripts);
      output = concatScripts(scriptFiles, scriptFiles[0]);
    }
    if (program.build) {
      dependencies = flatten(getDependencyTree(getDependencies(program.build)));
      dependencies = dependencies.map(function(x) {
        return [x.slice(0, -3), x];
      });
      output = concatScripts(dependencies, dependencies[0]);
    }
    if (program.getSimpleRequire) {
      output = getSimpleRequire();
    }
    if (program.shims) {
      shims = parseFileList(program.shims).map(function(_arg) {
        var path, _;

        _ = _arg[0], path = _arg[1];
        return fs.readFileSync(path, 'utf-8');
      });
      output = "" + (shims.join(';')) + ";" + output;
    }
    if (program.minify) {
      output = minify(output);
    }
    if (output) {
      return process.stdout.write(output);
    }
  };

  main();

}).call(this);
